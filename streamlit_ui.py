import streamlit as st
import tempfile

from langchain_core.messages import BaseMessage

from graph.workflow import graph
from vision.vision_analyzer import analyze_plant_disease, extract_disease_name


st.set_page_config(page_title="Ch·∫©n ƒëo√°n b·ªánh c√¢y", layout="centered")
st.title("üåæ CH·∫®N ƒêO√ÅN & TRA C·ª®U B·ªÜNH C√ÇY")

tab1, tab2 = st.tabs(["Nh·∫≠p c√¢u h·ªèi", "T·∫£i ·∫£nh c√¢y"])

final_question = None

with tab1:
    user_question = st.text_area("B·∫°n mu·ªën h·ªèi g√¨?", placeholder="V√≠ d·ª•: B·ªánh ƒë·∫°o √¥n ·ªü l√∫a l√† g√¨ v√† c√°ch ch·ªØa?")
    if st.button("Tra c·ª©u", key="text_query"):
        if user_question.strip():
            final_question = user_question.strip()
        else:
            st.warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")

with tab2:
    uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh c√¢y", type=["jpg", "jpeg", "png"])

    if uploaded_file:
        st.image(uploaded_file, caption="·∫¢nh b·∫°n ƒë√£ ch·ªçn", use_container_width=True)

        if st.button("Ph√¢n t√≠ch ·∫£nh"):
            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
                temp_file.write(uploaded_file.read())
                temp_path = temp_file.name

            with st.spinner("ƒêang ph√¢n t√≠ch ·∫£nh..."):
                response = analyze_plant_disease(temp_path)
                st.success("K·∫øt qu·∫£ ph√¢n t√≠ch:")
                st.write(response)

                disease_name = extract_disease_name(response)
                if disease_name:
                    st.info(f"T√™n b·ªánh ƒë∆∞·ª£c nh·∫≠n di·ªán: **{disease_name}**")
                    final_question = f"{disease_name} l√† g√¨ v√† c√°ch ƒëi·ªÅu tr·ªã?"
                else:
                    st.warning("Kh√¥ng tr√≠ch ƒë∆∞·ª£c t√™n b·ªánh r√µ r√†ng t·ª´ ·∫£nh.")

if final_question:
    with st.spinner("ƒêang truy v·∫•n th√¥ng tin..."):
        try:
            for chunk in graph.stream({"messages": [{"role": "user", "content": final_question}]}):
                for node, update in chunk.items():
                    message = update["messages"][-1]
                    print(f"\n Node: {node}")

            st.success("K·∫øt qu·∫£ tra c·ª©u:")
            if isinstance(message, BaseMessage):
                st.write(message.content)
            else:
                st.write(message)

        except Exception as e:
            st.error(f" L·ªói khi g·ªçi h·ªá th·ªëng RAG: {str(e)}")
else:
    st.info(" Nh·∫≠p c√¢u h·ªèi ho·∫∑c t·∫£i ·∫£nh ƒë·ªÉ tra c·ª©u b·ªánh c√¢y.")
